#!/bin/bash

# Allow __git_ps1 to work on arch linux
[[ -f /usr/share/git/git-prompt.sh ]] && . /usr/share/git/git-prompt.sh

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1

get_ps1() {
    local blue="\[\033[01;34m\]"
    local white="\[\033[01;00m\]"
    local magenta="\[\033[01;35m\]"
    local pink="\[\033[01;31m\]"
    local green="\[\033[01;32m\]"

    # Assign a pseudo-random color to the hostname string based on hostname value
    local hostname_number=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 30 + (total % 6)}')
    local hostname_color="\[\033[01;${hostname_number}m\]"

    local user="${blue}\u${white}"
    local host="${hostname_color}\h${white}"
    local dir="${green}\w${white}"
    local time="${green}\$(date \"+%H:%M:%S\")${white}"

    local git="${green}\$(__git_ps1 '%s')${white}"

    echo "${user}@${host} ${dir} ${git}\n${time} $ "
}

PS1="$(get_ps1)"

export GOPATH=$HOME/go

# Increase the amount of history bash will store and reload
export HISTFILE=~/.history
export HISTSIZE=
export HISTFILESIZE=
# Allows for sharing of history across tmux sessions and panes
# "-a" immediately appends new history to the histfile
export PROMPT_COMMAND='history -a'
# Ignore and erase duplicates and commands with leading whitespace
export HISTCONTROL=ignoreboth:erasedups

export EDITOR=vim

# ipython needs these two
export PAGER=less
export less=-r

# Platform dependant stuff
if [[ "$(uname)" == 'Linux' ]]; then
    . ~/.bash_linux
elif [[ "$(uname)" == 'Darwin' ]]; then
    . ~/.bash_mac
fi

export PATH="$HOME/bin:$HOME/go/bin:$PATH"

[[ -f ~/.bash_secret ]] && . ~/.bash_secret
[[ -f ~/.aliases ]] && . ~/.aliases
[[ -f ~/.distraction ]] && . ~/.distraction

command kubectl &> /dev/null && source <(kubectl completion bash)

export PYTHONDONTWRITEBYTECODE=1


# Activate the default virtualenv if one isn't activated already
default_venv="${HOME}/.virtualenvs/default"
if [[ -z ${VIRTUAL_ENV} ]] && [[ -d ${default_venv} ]]; then
    source ${default_venv}/bin/activate
elif [ -n "$VIRTUAL_ENV" ]; then
  . "$VIRTUAL_ENV/bin/activate"
fi


_poetry_0c1d51702c0313b5_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--ansi --directory --help --no-ansi --no-cache --no-interaction --no-plugins --quiet --verbose --version"

        case "$com" in

            (about)
            opts="${opts} "
            ;;

            (add)
            opts="${opts} --allow-prereleases --dev --dry-run --editable --extras --group --lock --optional --platform --python --source"
            ;;

            (build)
            opts="${opts} --format"
            ;;

            ('cache clear')
            opts="${opts} --all"
            ;;

            ('cache list')
            opts="${opts} "
            ;;

            (check)
            opts="${opts} "
            ;;

            (config)
            opts="${opts} --list --local --unset"
            ;;

            ('debug info')
            opts="${opts} "
            ;;

            ('debug resolve')
            opts="${opts} --extras --install --python --tree"
            ;;

            ('env info')
            opts="${opts} --executable --path"
            ;;

            ('env list')
            opts="${opts} --full-path"
            ;;

            ('env remove')
            opts="${opts} --all"
            ;;

            ('env use')
            opts="${opts} "
            ;;

            (export)
            opts="${opts} --dev --extras --format --only --output --with --with-credentials --without --without-hashes --without-urls"
            ;;

            (help)
            opts="${opts} "
            ;;

            (init)
            opts="${opts} --author --dependency --description --dev-dependency --license --name --python"
            ;;

            (install)
            opts="${opts} --all-extras --compile --dry-run --extras --no-dev --no-directory --no-root --only --only-root --remove-untracked --sync --with --without"
            ;;

            (list)
            opts="${opts} "
            ;;

            (lock)
            opts="${opts} --check --no-update"
            ;;

            (new)
            opts="${opts} --name --readme --src"
            ;;

            (publish)
            opts="${opts} --build --cert --client-cert --dry-run --password --repository --skip-existing --username"
            ;;

            (remove)
            opts="${opts} --dev --dry-run --group --lock"
            ;;

            (run)
            opts="${opts} "
            ;;

            (search)
            opts="${opts} "
            ;;

            ('self add')
            opts="${opts} --allow-prereleases --dry-run --editable --extras --source"
            ;;

            ('self install')
            opts="${opts} --dry-run --sync"
            ;;

            ('self lock')
            opts="${opts} --check --no-update"
            ;;

            ('self remove')
            opts="${opts} --dry-run"
            ;;

            ('self show')
            opts="${opts} --addons --latest --outdated --tree"
            ;;

            ('self show plugins')
            opts="${opts} "
            ;;

            ('self update')
            opts="${opts} --dry-run --preview"
            ;;

            (shell)
            opts="${opts} "
            ;;

            (show)
            opts="${opts} --all --latest --no-dev --only --outdated --top-level --tree --why --with --without"
            ;;

            ('source add')
            opts="${opts} --default --priority --secondary"
            ;;

            ('source remove')
            opts="${opts} "
            ;;

            ('source show')
            opts="${opts} "
            ;;

            (update)
            opts="${opts} --dry-run --lock --no-dev --only --with --without"
            ;;

            (version)
            opts="${opts} --dry-run --short"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="about add build 'cache clear' 'cache list' check config 'debug info' 'debug resolve' 'env info' 'env list' 'env remove' 'env use' export help init install list lock new publish remove run search 'self add' 'self install' 'self lock' 'self remove' 'self show' 'self show plugins' 'self update' shell show 'source add' 'source remove' 'source show' update version"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _poetry_0c1d51702c0313b5_complete poetry
complete -o default -F _poetry_0c1d51702c0313b5_complete /opt/homebrew/bin/poetry
